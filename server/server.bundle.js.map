{"version":3,"sources":["webpack://Server/webpack/bootstrap","webpack://Server/webpack/runtime/compat get default export","webpack://Server/webpack/runtime/define property getters","webpack://Server/webpack/runtime/hasOwnProperty shorthand","webpack://Server/external \"express\"","webpack://Server/external \"cookie-parser\"","webpack://Server/external \"redis\"","webpack://Server/external \"uuid\"","webpack://Server/external \"jsonwebtoken\"","webpack://Server/./dao/tasks.dao.ts","webpack://Server/external \"dotenv\"","webpack://Server/./app.ts","webpack://Server/./services/auth.middleware.ts"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","Function","promisify","thisArg","args","Promise","res","rej","this","error","success","config","client","process","env","REDIS_URL","app","set","port","PORT","use","__dirname","req","next","userIdToken","cookies","decodedUserToken","TOKEN_SECRET","userId","console","log","status","send","user","v4","cookie","render","title","tasks","parsedTasks","task","JSON","parse","parseResponse","hgetall","getAllTasks","post","id","hset","stringify","createTask","body","delete","taskId","hdel","deleteTask","params","listen"],"mappings":"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","file":"server.bundle.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cookie-parser\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"redis\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"uuid\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonwebtoken\");;","import { RedisClient } from 'redis';\nimport { v4 } from 'uuid';\nimport { Task, TasksById } from \"../../../todo/common/Tasks\";\n\ntype stringifiedTasks = {[key: string]: string};\n\nexport const getAllTasks = \n    async (client: RedisClient, userId: string): Promise<TasksById> => {\n\n    const stringifiedTasks: stringifiedTasks = \n        await client.hgetall.promisify(client, userId);\n        \n    return parseResponse(stringifiedTasks);\n};\n\nexport const createTask = \n    async (client: RedisClient, userId: string, task: Task): Promise<Task> => {\n\n    task.id = task.id || v4();\n    await client.hset.promisify(client, userId, task.id, JSON.stringify(task));\n\n    return task;\n}\n\nexport const deleteTask = \n    (client: RedisClient, userId: string, taskId: string) => {\n\n    return client.hdel.promisify(client, userId, taskId);\n}\n\nfunction parseResponse(res: stringifiedTasks): TasksById {\n    const parsedTasks: TasksById = {};\n\n    for (const task in res) {\n        parsedTasks[task] = JSON.parse(res[task])\n    }\n\n    return parsedTasks;\n}\n\n// Takes a function following the common error-first callback style, and returns a version that returns promises.\nFunction.prototype.promisify = function(thisArg: any, ...args: any[]): Promise<any> {\n    return new Promise((res, rej) => {\n        this.call(thisArg, ...args, (error: any, success: any) => \n            error ? rej(error) : res(success));\n    });\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"dotenv\");;","import express, { Express, Request, Response } from 'express';\nimport cookieParser from 'cookie-parser';\nimport redis from 'redis';\nimport { validateUser } from \"./services/auth.middleware\";\nimport { deleteTask, createTask, getAllTasks } from \"./dao/tasks.dao\";\nimport { Task, TasksById } from \"../common/Tasks\";\nimport { config } from \"dotenv\";\n\nconfig();\nconst client: redis.RedisClient = redis.createClient(process.env.REDIS_URL);\nconst app: Express = express();\napp.set('views', './');\nconst port: string = (process.env.PORT || \"3000\");\n\napp.use(express.static(__dirname + \"/public\"));\napp.use(express.json());\napp.use(cookieParser());\napp.use(validateUser);\n\napp.get('/', (req: Request, res: Response): void => {\n    res.render(\"index.ejs\", {title: \"Todo List\"});\n});\n\napp.get('/api/v1/tasks',  async (req: Request, res: Response): Promise<void> => { \n    const tasks: TasksById = await getAllTasks(client, req.userId);\n    res.send(tasks);\n});\n\napp.post('/api/v1/tasks',  async (req: Request, res: Response): Promise<void> => {\n    const task: Task = await createTask(client, req.userId, req.body);\n    res.send(task);\n});\n\napp.delete('/api/v1/tasks/:taskId', \n    async (req: Request, res: Response): Promise<void> => {\n\n    await deleteTask(client, req.userId, req.params.taskId);\n    res.send();    \n});\n\napp.listen(port, () => console.log(`listening on port ${port}`));\n","import { v4 } from \"uuid\";\nimport { Request, Response, NextFunction } from 'express';\nimport jwt from \"jsonwebtoken\";\n\nexport const validateUser = \n    async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    \n    const userIdCookieName: string = \"todoUserId\";\n    const userIdToken: string = req.cookies[userIdCookieName];\n    \n    if (!userIdToken) {\n        const user = {\n            userId : v4()\n        }\n        \n        req.userId = user.userId;\n        const userIdToken = jwt.sign(user, process.env.TOKEN_SECRET);\n        res.cookie(userIdCookieName, userIdToken);\n    } else {\n        try {\n            const decodedUserToken = await jwt.verify\n            .promisify(null, userIdToken, process.env.TOKEN_SECRET);\n            req.userId = decodedUserToken.userId;\n        } catch (error) {\n            console.log(error);\n            res.status(401).send(\"You have no access!\");\n        }\n    }\n    \n    next();\n}"],"sourceRoot":""}