{"version":3,"sources":["components/AddNewTask.tsx","components/Title.tsx","components/EditableLabel.tsx","components/TaskLine.tsx","components/TasksList.tsx","data-access/server-api.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddNewTask","props","useState","text","setText","classes","useStyles","className","container","taskInput","autoFocus","value","onChange","e","target","onKeyDown","key","addTask","addButton","onClick","createUseStyles","display","marginBottom","flexGrow","maxWidth","borderRadius","paddingLeft","color","alignSelf","marginRight","marginLeft","border","backgroundColor","height","Title","tasksArray","Object","values","tasks","numOfTasks","length","element","header","filter","task","isDone","EditableLabel","isEditing","setEditing","children","label","onBlur","saveText","onFocus","currentTarget","select","fontSize","TaskLine","setTask","checkbox","type","checked","taskToUpdate","id","updateTask","button","deleteTask","width","marginTop","borderBottomStyle","borderBottomColor","borderBottomWidth","TasksList","rows","forEach","push","getAllTasksFromServer","a","axios","get","response","data","deleteTaskFromServer","taskId","delete","addTaskToServer","post","updateTaskOnServer","App","setTasks","taskText","taskToAdd","newTasks","alert","taskToDelete","res","useEffect","app","minHeight","padding","fontFamily","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16c1b632.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\nimport {createUseStyles} from 'react-jss'\n\nexport default function AddNewTask(props: any) {\n    const [text, setText] = useState('');\n    const classes = useStyles();\n\n    function handleTextChange(e: ChangeEvent<HTMLInputElement>){\n        setText(e.target.value);\n    }\n\n    function handleAddTaskClick(e: React.MouseEvent<HTMLButtonElement>) {\n        if (text != '') {\n            props.addTask(text);\n            setText('');\n        }\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === \"Enter\" && text != '') {\n            props.addTask(text);\n            setText('');\n        }\n    };\n\n    return (\n        <div className={classes.container}>\n            <input className={classes.taskInput}\n                autoFocus \n                value={text} \n                onChange={handleTextChange} \n                onKeyDown={handleKeyDown} \n            />\n            <button className={classes.addButton} onClick={handleAddTaskClick}>Add Task</button>\n        </div>\n    );  \n}\n\nconst useStyles = createUseStyles({\n    container: {\n        display: \"flex\",\n        marginBottom: \"20px\",\n    },\n    taskInput: {\n        flexGrow: 1,\n        maxWidth: \"400px\",\n        borderRadius: \"5px\",\n        paddingLeft: \"5px\",\n    },\n    addButton: {\n        color: \"black\",\n        alignSelf: \"flex-end\",\n        marginRight: \"5px\",\n        marginLeft: \"auto\",\n        border: \"none\",\n        backgroundColor: \"red\",\n        borderRadius: \"5px\",\n        height: 24,\n    },\n})","import { Task } from '../../../common/Tasks';\nimport React from 'react';\nimport {createUseStyles} from 'react-jss';\n\nexport default function Title(props: any) {\n    const classes = useStyles();\n    const tasksArray: Task[] = Object.values(props.tasks);\n    const numOfTasks = tasksArray.length;\n\n    const element: JSX.Element = (numOfTasks > 0) ? \n        <h1 className={classes.header}>\n            {tasksArray.filter(task => task.isDone).length}/{numOfTasks} tasks\n        </h1> :\n        <h1 className={classes.header}>Create your first task!</h1>;\n\n    return (\n        <div>\n            {element}\n        </div>\n    );\n}\n\nconst useStyles = createUseStyles({\n    header: {\n      color: 'red'\n    }\n});\n  ","import React, { ChangeEvent, useState } from 'react';\nimport {createUseStyles} from 'react-jss'\n\nexport default function EditableLabel (props: any) {\n  const [isEditing, setEditing] = useState<boolean>(false);\n  const [text, setText] = useState<string>(props.children);\n  const classes = useStyles();\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    (e.key === \"Enter\")  && setEditing(false);\n  };\n\n  function changeText(e: ChangeEvent<HTMLInputElement>){\n    setText(e.target.value);\n  }\n\n  function doneEditing() {\n    setEditing(false);\n    props.saveText(text);\n  }\n  \n  return (\n    <span className={classes.label}>\n      {isEditing ? (\n        <input className={classes.label}\n          value={text}\n          onChange={changeText}\n          onBlur={doneEditing}\n          onKeyDown={handleKeyDown}\n          autoFocus\n          onFocus={e => e.currentTarget.select()}\n        />\n      ) : (\n        <label\n          className={classes.label}\n          onClick={() => setEditing(true)}\n        >\n          {text}\n        </label>\n      )}\n    </span>\n  );\n};\n\nconst useStyles = createUseStyles({\n  label: {\n      display: \"flex\",\n      flexGrow: 1,\n      fontSize: \"20px\",\n}});","import React, { ChangeEvent, useState } from 'react';\nimport { Task, NewTask } from '../../../common/Tasks';\nimport EditableLabel from './EditableLabel';\nimport {createUseStyles} from 'react-jss'\n\nexport default function TaskLine(props: any) {\n    const [task, setTask] = useState<Task>(props.task);\n    const classes = useStyles();\n    function handleCheckboxChange(e: ChangeEvent<HTMLInputElement>) {\n        const taskToUpdate = {\n            isDone: e.target.checked,\n            text: task.text,\n            id: task.id\n        };\n\n        setTask(taskToUpdate);\n        props.updateTask(taskToUpdate);\n    }\n    \n    function handleTextChange(text: string) {\n        const taskToUpdate = {\n            isDone: task.isDone,\n            text: text,\n            id: task.id\n        };\n\n        setTask(taskToUpdate);\n        props.updateTask(taskToUpdate);\n    }\n\n    return (\n        <div className={classes.task}>\n            <input \n                className={classes.checkbox}\n                type=\"checkbox\" \n                checked={task.isDone}\n                onChange={handleCheckboxChange}\n            />\n            <EditableLabel saveText={handleTextChange}>\n                {task.text}\n            </EditableLabel>\n            <button className={classes.button} onClick={() => props.deleteTask(task)}>Delete</button>\n        </div>\n    );\n}\n\nconst useStyles = createUseStyles({\n    checkbox: {\n        height: \"18px\",\n        width: \"18px\",\n    },\n    button: {\n        backgroundColor: \"white\",\n        color: \"red\",\n        border: \"none\",\n    },\n    task: {\n        display: \"flex\",\n        marginTop: \"8px\",\n        borderBottomStyle: 'solid',\n        borderBottomColor: '#3d3d3d',\n        borderBottomWidth: '1px',\n    }\n});\n","import React from 'react';\nimport { Task } from '../../../common/Tasks';\nimport TaskLine from './TaskLine';\n\nexport default function TasksList(props: any) {\n    const rows: JSX.Element[] = [];\n    const tasksArray: Task[] = Object.values(props.tasks);\n    \n    tasksArray.forEach((task: Task) => {\n        rows.push(\n            <div key={task.id}>\n                <TaskLine \n                    task={task} \n                    updateTask={props.updateTask} \n                    deleteTask={props.deleteTask}\n                />\n            </div>\n        );\n    });\n\n    return (\n        <div>\n            {rows}\n        </div>\n    );\n}","import axios, { AxiosResponse } from 'axios';\nimport { Task, NewTask, TasksById, GUID } from '../../../common/Tasks';\n\nexport const getAllTasksFromServer = async(): Promise<TasksById> => {\n    const response: AxiosResponse = await axios.get('/api/v1/tasks');\n    return response.data;\n}\n\nexport const deleteTaskFromServer = (taskId: GUID): Promise<void> => {\n     return axios.delete('/api/v1/tasks/' + taskId);\n}\n\nexport const addTaskToServer = async(task: NewTask): Promise<Task> => {\n    const response: AxiosResponse = await axios.post('/api/v1/tasks', task);\n    return response.data;\n}\n\nexport const updateTaskOnServer = async (task: Task): Promise<void> => {\n    await axios.post('/api/v1/tasks', task);\n}","import React, { useEffect, useState } from 'react';\nimport AddNewTask from './AddNewTask';\nimport { Task, NewTask, TasksById } from '../../../common/Tasks';\nimport Title from './Title';\nimport TasksList from './TasksList';\nimport { getAllTasksFromServer, deleteTaskFromServer, addTaskToServer, updateTaskOnServer } from '../data-access/server-api';\nimport {createUseStyles} from 'react-jss';\n\nexport default function App() {\n  const [tasks, setTasks] = useState<TasksById>({});\n  const classes = useStyles();  \n  useEffect(() => {\n    (async function getTasks() {\n      try {\n        setTasks(await getAllTasksFromServer());\n      } catch (error) {\n        alert(\"cannot get your tasks\");\n      }\n  })()}, []);\n\n  async function addTask(taskText: string){\n    try {\n      const taskToAdd: Task = await addTaskToServer({text: taskText, isDone: false});\n      const newTasks = {...tasks};\n      newTasks[taskToAdd.id] = taskToAdd;\n      setTasks(newTasks);\n    } catch (error) {\n      alert(\"we cannot add your task!\");\n    }\n  }\n\n  async function updateTask(task: Task) {\n    try {\n      await updateTaskOnServer(task);\n    } catch (error) {\n      alert(\"cannot update task\");\n    }\n  }\n\n  async function deleteTask (taskToDelete: Task) {\n    try {\n      await deleteTaskFromServer(taskToDelete.id);\n      let {[taskToDelete.id]: task, ...res } = tasks;\n      setTasks(res);\n    } catch (error) {\n      alert(\"we cannot delete your task\");\n    }\n  }\n\n  return (\n    <div className={classes.app}>\n      <Title tasks={tasks} />\n      <AddNewTask addTask={addTask} />\n      <TasksList \n        tasks={tasks} \n        updateTask={updateTask}\n        deleteTask={deleteTask}\n      />\n    </div>\n  );\n}\n\nconst useStyles = createUseStyles({\n  app: {\n    maxWidth: \"600px\",\n    minHeight: \"400px\",\n    padding: \"10px\",            \n    fontFamily: \"Helvetica\",\n}});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}