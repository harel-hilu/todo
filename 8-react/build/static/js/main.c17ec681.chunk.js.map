{"version":3,"sources":["components/AddNewTask.tsx","components/Title.tsx","components/EditableLabel.tsx","components/TaskLine.tsx","components/TasksList.tsx","data-access/server-api.ts","components/App.tsx","index.tsx"],"names":["AddNewTask","addTask","useState","text","setText","classes","useStyles","addTaskIfNotEmpty","className","container","taskInput","autoFocus","value","onChange","e","target","onKeyDown","key","addButton","onClick","createUseStyles","display","marginBottom","flexGrow","maxWidth","borderRadius","paddingLeft","color","alignSelf","marginRight","marginLeft","border","backgroundColor","height","Title","tasks","showCompleted","tasksArray","Object","values","numOfTasks","length","numOfDoneTasks","filter","task","isDone","uncompletedTasks","textToShow","header","EditableLabel","initialValue","saveText","isEditing","setEditing","doneEditing","label","onBlur","onFocus","currentTarget","select","fontSize","TaskLine","taskToRender","updateTask","deleteTask","setTask","handleTaskChange","taskToUpdate","id","checkbox","type","checked","newText","button","width","marginTop","borderBottomStyle","borderBottomColor","borderBottomWidth","TasksList","rows","map","getAllTasksFromServer","a","axios","get","response","data","deleteTaskFromServer","taskId","delete","addTaskToServer","post","updateTaskOnServer","App","setTasks","isShowCompleted","setShowCompleted","taskText","newTask","taskToAdd","newTasks","alert","updatedTask","taskToDelete","res","useEffect","storageShowCompleted","localStorage","getItem","JSON","parse","tasksFromServer","setItem","stringify","app","minHeight","padding","fontFamily","textColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c17ec681.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\nimport {createUseStyles} from 'react-jss'\nimport PropTypes from 'prop-types';\n\nexport default function AddNewTask({addTask}: any) {\n    const [text, setText] = useState<string>('');\n    const classes: Record<string, string> = useStyles();\n\n    function addTaskIfNotEmpty(): void {\n        if (text !== '') {\n            addTask(text);\n            setText('');\n        }\n    }\n\n    return (\n        <div className={classes.container}>\n            <input className={classes.taskInput}\n                autoFocus \n                value={text} \n                onChange={(e: ChangeEvent<HTMLInputElement>) => setText(e.target.value)}\n                onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => \n                    (e.key === \"Enter\" && addTaskIfNotEmpty())} \n            />\n            <button className={classes.addButton} onClick={addTaskIfNotEmpty}>\n                Add Task\n            </button>\n        </div>\n    );  \n}\n\nAddNewTask.propTypes = {\n    addTask: PropTypes.func\n}\n\nconst useStyles = createUseStyles({\n    container: {\n        display: \"flex\",\n        marginBottom: \"20px\",\n    },\n    taskInput: {\n        flexGrow: 1,\n        maxWidth: \"400px\",\n        borderRadius: \"5px\",\n        paddingLeft: \"5px\",\n    },\n    addButton: {\n        color: \"white\",\n        alignSelf: \"flex-end\",\n        marginRight: \"5px\",\n        marginLeft: \"auto\",\n        border: \"none\",\n        backgroundColor: \"black\",\n        borderRadius: \"5px\",\n        height: 24,\n    },\n})","import { Task } from '../../../common/Tasks';\nimport React from 'react';\nimport {createUseStyles} from 'react-jss';\nimport PropTypes from 'prop-types';\n\nexport default function Title({tasks, showCompleted}: any) {\n    const classes: Record<string, string> = useStyles();\n    const tasksArray: Task[] = Object.values(tasks);\n    const numOfTasks: number = tasksArray.length;\n    const numOfDoneTasks: number = tasksArray.filter(task => task.isDone).length;\n    const uncompletedTasks: number = numOfTasks - numOfDoneTasks;\n    let textToShow = \"Create a task\";\n    \n    if (showCompleted) {\n        if (numOfTasks > 0) {\n            textToShow = `${numOfDoneTasks}/${numOfTasks} tasks`\n        }\n    } else if(uncompletedTasks > 0) {\n        textToShow = `0/${uncompletedTasks} tasks`;\n    }\n\n    return (\n        <div>\n            <h1 className={classes.header}>\n                {textToShow}\n            </h1> \n        </div>\n    );\n}\n\nTitle.propTypes = {\n    tasks: PropTypes.object,\n    showCompleted: PropTypes.bool\n}\n\nconst useStyles = createUseStyles({\n    header: {\n      color: 'red'\n    }\n});\n  ","import React, { ChangeEvent, useState } from 'react';\nimport {createUseStyles} from 'react-jss'\nimport PropTypes from 'prop-types';\n\nexport default function EditableLabel ({initialValue, saveText}: any) {\n  const [isEditing, setEditing] = useState<boolean>(false);\n  const [text, setText] = useState<string>(initialValue);\n  const classes = useStyles();\n\n  function doneEditing() {\n    setEditing(false);\n    saveText(text);\n  }\n  \n  return (\n    <span className={classes.label}>\n      {isEditing ? (\n        <input className={classes.label}\n          value={text}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setText(e.target.value)}\n          onBlur={doneEditing}\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => \n            (e.key === \"Enter\") && doneEditing()}\n          autoFocus\n          onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.currentTarget.select()}\n        />\n      ) : (\n        <label\n          className={classes.label}\n          onClick={() => setEditing(true)}>\n          {text}\n        </label>\n      )}\n    </span>\n  );\n};\n\nEditableLabel.propTypes = {\n  initialValue: PropTypes.string,\n  saveText: PropTypes.func,\n}\n\nconst useStyles = createUseStyles({\n  label: {\n      display: \"flex\",\n      flexGrow: 1,\n      fontSize: \"20px\",\n}});\n","import React, { ChangeEvent, useState } from 'react';\nimport { Task } from '../../../common/Tasks';\nimport EditableLabel from './EditableLabel';\nimport {createUseStyles} from 'react-jss';\nimport PropTypes from 'prop-types';\n\nexport default function TaskLine({ taskToRender, updateTask, deleteTask }: any) {\n    const [task, setTask] = useState<Task>(taskToRender);\n    const classes: Record<string, string> = useStyles();\n    \n    function handleTaskChange({isDone=task.isDone, text=task.text}) {\n        const taskToUpdate = {\n            isDone: isDone,\n            text: text,\n            id: task.id\n        };\n\n        setTask(taskToUpdate);\n        updateTask(taskToUpdate);\n    }\n\n    return (\n        <div className={classes.task}>\n            <input \n                className={classes.checkbox}\n                type=\"checkbox\" \n                checked={task.isDone}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                    handleTaskChange({isDone: e.target.checked})}\n            />\n\n            <EditableLabel \n                initialValue={task.text} \n                saveText={(newText: string) => handleTaskChange({text: newText})} \n            />\n \n            <button \n                className={classes.button} \n                onClick={() => deleteTask(task)}> \n                Delete\n            </button>\n        </div>\n    );\n}\n\nTaskLine.propTypes = {\n    taskToRender: PropTypes.object,\n    updateTask: PropTypes.func,\n    deleteTask: PropTypes.func\n}\n\nconst useStyles = createUseStyles({\n    checkbox: {\n        height: \"18px\",\n        width: \"18px\",\n    },\n    button: {\n        backgroundColor: \"white\",\n        color: \"red\",\n        border: \"none\",\n    },\n    task: {\n        display: \"flex\",\n        marginTop: \"8px\",\n        borderBottomStyle: 'solid',\n        borderBottomColor: '#3d3d3d',\n        borderBottomWidth: '1px',\n    }\n});\n","import React from 'react';\nimport { Task } from '../../../common/Tasks';\nimport TaskLine from './TaskLine';\nimport PropTypes from 'prop-types';\n\nexport default function TasksList({tasks, updateTask, deleteTask, showCompleted}: any){\n    const tasksArray: Task[] = Object.values(tasks);\n    \n    const rows: JSX.Element[] = tasksArray\n        .filter((task: Task) => showCompleted || !task.isDone).map((task: Task) =>\n            <div key={task.id}>\n                <TaskLine \n                    taskToRender={task} \n                    updateTask={updateTask} \n                    deleteTask={deleteTask}\n                />\n            </div>\n    );\n\n    return (\n        <div>\n            {rows}\n        </div>\n    );\n}\n\nTasksList.propTypes = {\n    tasks: PropTypes.object,\n    updateTask: PropTypes.func,\n    deleteTask: PropTypes.func,\n    showCompleted: PropTypes.bool\n}","import axios, { AxiosResponse } from 'axios';\nimport { Task, NewTask, TasksById, GUID } from '../../../common/Tasks';\n\nexport const getAllTasksFromServer = async(): Promise<TasksById> => {\n    const response: AxiosResponse = await axios.get('/api/v1/tasks');\n    return response.data;\n}\n\nexport const deleteTaskFromServer = (taskId: GUID): Promise<void> => {\n     return axios.delete('/api/v1/tasks/' + taskId);\n}\n\nexport const addTaskToServer = async(task: NewTask): Promise<Task> => {\n    const response: AxiosResponse = await axios.post('/api/v1/tasks', task);\n    return response.data;\n}\n\nexport const updateTaskOnServer = async (task: Task): Promise<void> => {\n    await axios.post('/api/v1/tasks', task);\n}","import React, { useEffect, useState } from 'react';\nimport AddNewTask from './AddNewTask';\nimport { NewTask, Task, TasksById } from '../../../common/Tasks';\nimport Title from './Title';\nimport TasksList from './TasksList';\nimport {getAllTasksFromServer, deleteTaskFromServer, addTaskToServer, updateTaskOnServer}\n  from '../data-access/server-api';\nimport {createUseStyles} from 'react-jss';\n\nexport default function App() {\n  const [tasks, setTasks] = useState<TasksById>({});\n  const [isShowCompleted, setShowCompleted] = useState<boolean>(true);\n  const classes: Record<string, string> = useStyles();  \n\n  useEffect((): void => {\n    const storageShowCompleted = localStorage.getItem(\"todo_isShowCompleted\");\n    storageShowCompleted && setShowCompleted(JSON.parse(storageShowCompleted));\n\n    (async (): Promise<void> => {\n      try {\n        const tasksFromServer: TasksById = await getAllTasksFromServer();\n        setTasks(tasksFromServer);\n      } catch (error) {\n        alert(\"cannot get your tasks\");\n      }\n    })()\n  }, []);\n\n  useEffect(() => {\n      localStorage.setItem(\"todo_isShowCompleted\", JSON.stringify(isShowCompleted));\n  }, [isShowCompleted]);\n\n  async function addTask(taskText: string): Promise<void> {\n    try {\n      const newTask: NewTask = {text: taskText, isDone: false};\n      const taskToAdd: Task = await addTaskToServer(newTask);\n      const newTasks: TasksById = {...tasks, [taskToAdd.id]: taskToAdd};\n      setTasks(newTasks);\n    } catch (error) {\n      alert(\"we cannot add your task!\");\n    }\n  }\n\n  async function updateTask(updatedTask: Task): Promise<void> {\n    try {\n      await updateTaskOnServer(updatedTask);\n      const newTasks: TasksById = {...tasks};\n      newTasks[updatedTask.id] = updatedTask;\n      setTasks(newTasks);\n    } catch (error) {\n      alert(\"cannot update task\");\n    }\n  }\n\n  async function deleteTask (taskToDelete: Task): Promise<void> {\n    try {\n      await deleteTaskFromServer(taskToDelete.id);\n      const {[taskToDelete.id]: task, ...res } = tasks;\n      setTasks(res);\n    } catch (error) {\n      alert(\"we cannot delete your task\");\n    }\n  }\n\n  return (\n    <div className={classes.app}>\n      <Title tasks={tasks} showCompleted={isShowCompleted} />\n      <AddNewTask addTask={addTask} />\n      <button \n        onClick={() => setShowCompleted(!isShowCompleted)}\n        className={classes.button}>\n        {isShowCompleted ? \"Hide completed\" : \"Show completed\"}\n      </button>\n      <TasksList \n        tasks={tasks} \n        updateTask={updateTask}\n        deleteTask={deleteTask}\n        showCompleted={isShowCompleted} \n      />\n    </div>\n  );\n}\n\nconst useStyles = createUseStyles({\n  app: {\n    maxWidth: \"600px\",\n    minHeight: \"400px\",\n    padding: \"10px\",            \n    fontFamily: \"Helvetica\",\n  },\n  button: {\n    backgroundColor: \"white\",\n    textColor: \"black\",\n    marginBottom: \"10px\",\n    marginRight: 0,\n    marginLeft: 0,\n    border: \"none\"\n  }\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}